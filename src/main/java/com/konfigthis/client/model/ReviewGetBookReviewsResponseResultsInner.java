/*
 * Books API
 * The Books API provides information about book reviews and The New York Times Best Sellers lists.  ## Best Sellers Lists Services ### List Names The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.  ``` /lists/names.json ```  ### List Data  The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.  ``` /lists/2019-01-20/hardcover-fiction.json ```  Use \"current\" for {date} to get the latest list. ``` /lists/current/hardcover-fiction.json ```  ## Book Reviews Services  The book reviews service lets you get NYT book review by author, ISBN, or title.  ``` /reviews.json?author=Michelle+Obama ```  ``` /reviews.json?isbn=9781524763138 ```  ``` /reviews.json?title=Becoming ```  ## Example Calls  ``` https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey ``` 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReviewGetBookReviewsResponseResultsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReviewGetBookReviewsResponseResultsInner {
  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PUBLICATION_DT = "publication_dt";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_DT)
  private String publicationDt;

  public static final String SERIALIZED_NAME_BYLINE = "byline";
  @SerializedName(SERIALIZED_NAME_BYLINE)
  private String byline;

  public static final String SERIALIZED_NAME_BOOK_TITLE = "book_title";
  @SerializedName(SERIALIZED_NAME_BOOK_TITLE)
  private String bookTitle;

  public static final String SERIALIZED_NAME_BOOK_AUTHOR = "book_author";
  @SerializedName(SERIALIZED_NAME_BOOK_AUTHOR)
  private String bookAuthor;

  public static final String SERIALIZED_NAME_ISBN13 = "isbn13";
  @SerializedName(SERIALIZED_NAME_ISBN13)
  private List<String> isbn13 = null;

  public ReviewGetBookReviewsResponseResultsInner() {
  }

  public ReviewGetBookReviewsResponseResultsInner summary(String summary) {
    
    
    
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    
    
    
    this.summary = summary;
  }


  public ReviewGetBookReviewsResponseResultsInner url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public ReviewGetBookReviewsResponseResultsInner publicationDt(String publicationDt) {
    
    
    
    
    this.publicationDt = publicationDt;
    return this;
  }

   /**
   * Get publicationDt
   * @return publicationDt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPublicationDt() {
    return publicationDt;
  }


  public void setPublicationDt(String publicationDt) {
    
    
    
    this.publicationDt = publicationDt;
  }


  public ReviewGetBookReviewsResponseResultsInner byline(String byline) {
    
    
    
    
    this.byline = byline;
    return this;
  }

   /**
   * Get byline
   * @return byline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getByline() {
    return byline;
  }


  public void setByline(String byline) {
    
    
    
    this.byline = byline;
  }


  public ReviewGetBookReviewsResponseResultsInner bookTitle(String bookTitle) {
    
    
    
    
    this.bookTitle = bookTitle;
    return this;
  }

   /**
   * Get bookTitle
   * @return bookTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBookTitle() {
    return bookTitle;
  }


  public void setBookTitle(String bookTitle) {
    
    
    
    this.bookTitle = bookTitle;
  }


  public ReviewGetBookReviewsResponseResultsInner bookAuthor(String bookAuthor) {
    
    
    
    
    this.bookAuthor = bookAuthor;
    return this;
  }

   /**
   * Get bookAuthor
   * @return bookAuthor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBookAuthor() {
    return bookAuthor;
  }


  public void setBookAuthor(String bookAuthor) {
    
    
    
    this.bookAuthor = bookAuthor;
  }


  public ReviewGetBookReviewsResponseResultsInner isbn13(List<String> isbn13) {
    
    
    
    
    this.isbn13 = isbn13;
    return this;
  }

  public ReviewGetBookReviewsResponseResultsInner addIsbn13Item(String isbn13Item) {
    if (this.isbn13 == null) {
      this.isbn13 = new ArrayList<>();
    }
    this.isbn13.add(isbn13Item);
    return this;
  }

   /**
   * Get isbn13
   * @return isbn13
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getIsbn13() {
    return isbn13;
  }


  public void setIsbn13(List<String> isbn13) {
    
    
    
    this.isbn13 = isbn13;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReviewGetBookReviewsResponseResultsInner instance itself
   */
  public ReviewGetBookReviewsResponseResultsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReviewGetBookReviewsResponseResultsInner reviewGetBookReviewsResponseResultsInner = (ReviewGetBookReviewsResponseResultsInner) o;
    return Objects.equals(this.summary, reviewGetBookReviewsResponseResultsInner.summary) &&
        Objects.equals(this.url, reviewGetBookReviewsResponseResultsInner.url) &&
        Objects.equals(this.publicationDt, reviewGetBookReviewsResponseResultsInner.publicationDt) &&
        Objects.equals(this.byline, reviewGetBookReviewsResponseResultsInner.byline) &&
        Objects.equals(this.bookTitle, reviewGetBookReviewsResponseResultsInner.bookTitle) &&
        Objects.equals(this.bookAuthor, reviewGetBookReviewsResponseResultsInner.bookAuthor) &&
        Objects.equals(this.isbn13, reviewGetBookReviewsResponseResultsInner.isbn13)&&
        Objects.equals(this.additionalProperties, reviewGetBookReviewsResponseResultsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(summary, url, publicationDt, byline, bookTitle, bookAuthor, isbn13, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReviewGetBookReviewsResponseResultsInner {\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    publicationDt: ").append(toIndentedString(publicationDt)).append("\n");
    sb.append("    byline: ").append(toIndentedString(byline)).append("\n");
    sb.append("    bookTitle: ").append(toIndentedString(bookTitle)).append("\n");
    sb.append("    bookAuthor: ").append(toIndentedString(bookAuthor)).append("\n");
    sb.append("    isbn13: ").append(toIndentedString(isbn13)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("summary");
    openapiFields.add("url");
    openapiFields.add("publication_dt");
    openapiFields.add("byline");
    openapiFields.add("book_title");
    openapiFields.add("book_author");
    openapiFields.add("isbn13");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReviewGetBookReviewsResponseResultsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReviewGetBookReviewsResponseResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReviewGetBookReviewsResponseResultsInner is not found in the empty JSON string", ReviewGetBookReviewsResponseResultsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("publication_dt") != null && !jsonObj.get("publication_dt").isJsonNull()) && !jsonObj.get("publication_dt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publication_dt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publication_dt").toString()));
      }
      if ((jsonObj.get("byline") != null && !jsonObj.get("byline").isJsonNull()) && !jsonObj.get("byline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `byline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("byline").toString()));
      }
      if ((jsonObj.get("book_title") != null && !jsonObj.get("book_title").isJsonNull()) && !jsonObj.get("book_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `book_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("book_title").toString()));
      }
      if ((jsonObj.get("book_author") != null && !jsonObj.get("book_author").isJsonNull()) && !jsonObj.get("book_author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `book_author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("book_author").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("isbn13") != null && !jsonObj.get("isbn13").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `isbn13` to be an array in the JSON string but got `%s`", jsonObj.get("isbn13").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReviewGetBookReviewsResponseResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReviewGetBookReviewsResponseResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReviewGetBookReviewsResponseResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReviewGetBookReviewsResponseResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReviewGetBookReviewsResponseResultsInner>() {
           @Override
           public void write(JsonWriter out, ReviewGetBookReviewsResponseResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReviewGetBookReviewsResponseResultsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReviewGetBookReviewsResponseResultsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReviewGetBookReviewsResponseResultsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReviewGetBookReviewsResponseResultsInner
  * @throws IOException if the JSON string is invalid with respect to ReviewGetBookReviewsResponseResultsInner
  */
  public static ReviewGetBookReviewsResponseResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReviewGetBookReviewsResponseResultsInner.class);
  }

 /**
  * Convert an instance of ReviewGetBookReviewsResponseResultsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

