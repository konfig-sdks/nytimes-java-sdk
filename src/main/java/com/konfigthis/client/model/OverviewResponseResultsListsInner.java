/*
 * Books API
 * The Books API provides information about book reviews and The New York Times Best Sellers lists.  ## Best Sellers Lists Services ### List Names The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.  ``` /lists/names.json ```  ### List Data  The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.  ``` /lists/2019-01-20/hardcover-fiction.json ```  Use \"current\" for {date} to get the latest list. ``` /lists/current/hardcover-fiction.json ```  ## Book Reviews Services  The book reviews service lets you get NYT book review by author, ISBN, or title.  ``` /reviews.json?author=Michelle+Obama ```  ``` /reviews.json?isbn=9781524763138 ```  ``` /reviews.json?title=Becoming ```  ## Example Calls  ``` https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey ``` 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OverviewResponseResultsListsInnerBooksInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OverviewResponseResultsListsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OverviewResponseResultsListsInner {
  public static final String SERIALIZED_NAME_LIST_ID = "list_id";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private Integer listId;

  public static final String SERIALIZED_NAME_LIST_NAME = "list_name";
  @SerializedName(SERIALIZED_NAME_LIST_NAME)
  private String listName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_LIST_IMAGE = "list_image";
  @SerializedName(SERIALIZED_NAME_LIST_IMAGE)
  private String listImage;

  public static final String SERIALIZED_NAME_BOOKS = "books";
  @SerializedName(SERIALIZED_NAME_BOOKS)
  private List<OverviewResponseResultsListsInnerBooksInner> books = null;

  public OverviewResponseResultsListsInner() {
  }

  public OverviewResponseResultsListsInner listId(Integer listId) {
    
    
    
    
    this.listId = listId;
    return this;
  }

   /**
   * Get listId
   * @return listId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getListId() {
    return listId;
  }


  public void setListId(Integer listId) {
    
    
    
    this.listId = listId;
  }


  public OverviewResponseResultsListsInner listName(String listName) {
    
    
    
    
    this.listName = listName;
    return this;
  }

   /**
   * Get listName
   * @return listName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getListName() {
    return listName;
  }


  public void setListName(String listName) {
    
    
    
    this.listName = listName;
  }


  public OverviewResponseResultsListsInner displayName(String displayName) {
    
    
    
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    
    this.displayName = displayName;
  }


  public OverviewResponseResultsListsInner updated(String updated) {
    
    
    
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUpdated() {
    return updated;
  }


  public void setUpdated(String updated) {
    
    
    
    this.updated = updated;
  }


  public OverviewResponseResultsListsInner listImage(String listImage) {
    
    
    
    
    this.listImage = listImage;
    return this;
  }

   /**
   * Get listImage
   * @return listImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getListImage() {
    return listImage;
  }


  public void setListImage(String listImage) {
    
    
    
    this.listImage = listImage;
  }


  public OverviewResponseResultsListsInner books(List<OverviewResponseResultsListsInnerBooksInner> books) {
    
    
    
    
    this.books = books;
    return this;
  }

  public OverviewResponseResultsListsInner addBooksItem(OverviewResponseResultsListsInnerBooksInner booksItem) {
    if (this.books == null) {
      this.books = new ArrayList<>();
    }
    this.books.add(booksItem);
    return this;
  }

   /**
   * Get books
   * @return books
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OverviewResponseResultsListsInnerBooksInner> getBooks() {
    return books;
  }


  public void setBooks(List<OverviewResponseResultsListsInnerBooksInner> books) {
    
    
    
    this.books = books;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OverviewResponseResultsListsInner instance itself
   */
  public OverviewResponseResultsListsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OverviewResponseResultsListsInner overviewResponseResultsListsInner = (OverviewResponseResultsListsInner) o;
    return Objects.equals(this.listId, overviewResponseResultsListsInner.listId) &&
        Objects.equals(this.listName, overviewResponseResultsListsInner.listName) &&
        Objects.equals(this.displayName, overviewResponseResultsListsInner.displayName) &&
        Objects.equals(this.updated, overviewResponseResultsListsInner.updated) &&
        Objects.equals(this.listImage, overviewResponseResultsListsInner.listImage) &&
        Objects.equals(this.books, overviewResponseResultsListsInner.books)&&
        Objects.equals(this.additionalProperties, overviewResponseResultsListsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listId, listName, displayName, updated, listImage, books, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OverviewResponseResultsListsInner {\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    listName: ").append(toIndentedString(listName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    listImage: ").append(toIndentedString(listImage)).append("\n");
    sb.append("    books: ").append(toIndentedString(books)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("list_id");
    openapiFields.add("list_name");
    openapiFields.add("display_name");
    openapiFields.add("updated");
    openapiFields.add("list_image");
    openapiFields.add("books");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OverviewResponseResultsListsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OverviewResponseResultsListsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OverviewResponseResultsListsInner is not found in the empty JSON string", OverviewResponseResultsListsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("list_name") != null && !jsonObj.get("list_name").isJsonNull()) && !jsonObj.get("list_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_name").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("list_image") != null && !jsonObj.get("list_image").isJsonNull()) && !jsonObj.get("list_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_image").toString()));
      }
      if (jsonObj.get("books") != null && !jsonObj.get("books").isJsonNull()) {
        JsonArray jsonArraybooks = jsonObj.getAsJsonArray("books");
        if (jsonArraybooks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("books").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `books` to be an array in the JSON string but got `%s`", jsonObj.get("books").toString()));
          }

          // validate the optional field `books` (array)
          for (int i = 0; i < jsonArraybooks.size(); i++) {
            OverviewResponseResultsListsInnerBooksInner.validateJsonObject(jsonArraybooks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OverviewResponseResultsListsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OverviewResponseResultsListsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OverviewResponseResultsListsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OverviewResponseResultsListsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OverviewResponseResultsListsInner>() {
           @Override
           public void write(JsonWriter out, OverviewResponseResultsListsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OverviewResponseResultsListsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OverviewResponseResultsListsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OverviewResponseResultsListsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OverviewResponseResultsListsInner
  * @throws IOException if the JSON string is invalid with respect to OverviewResponseResultsListsInner
  */
  public static OverviewResponseResultsListsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OverviewResponseResultsListsInner.class);
  }

 /**
  * Convert an instance of OverviewResponseResultsListsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

