/*
 * Books API
 * The Books API provides information about book reviews and The New York Times Best Sellers lists.  ## Best Sellers Lists Services ### List Names The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.  ``` /lists/names.json ```  ### List Data  The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.  ``` /lists/2019-01-20/hardcover-fiction.json ```  Use \"current\" for {date} to get the latest list. ``` /lists/current/hardcover-fiction.json ```  ## Book Reviews Services  The book reviews service lets you get NYT book review by author, ISBN, or title.  ``` /reviews.json?author=Michelle+Obama ```  ``` /reviews.json?isbn=9781524763138 ```  ``` /reviews.json?title=Becoming ```  ## Example Calls  ``` https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey ``` 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ListGetNamesResponseResultsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ListGetNamesResponseResultsInner {
  public static final String SERIALIZED_NAME_LIST_NAME = "list_name";
  @SerializedName(SERIALIZED_NAME_LIST_NAME)
  private String listName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LIST_NAME_ENCODED = "list_name_encoded";
  @SerializedName(SERIALIZED_NAME_LIST_NAME_ENCODED)
  private String listNameEncoded;

  public static final String SERIALIZED_NAME_OLDEST_PUBLISHED_DATE = "oldest_published_date";
  @SerializedName(SERIALIZED_NAME_OLDEST_PUBLISHED_DATE)
  private String oldestPublishedDate;

  public static final String SERIALIZED_NAME_NEWEST_PUBLISHED_DATE = "newest_published_date";
  @SerializedName(SERIALIZED_NAME_NEWEST_PUBLISHED_DATE)
  private String newestPublishedDate;

  /**
   * Gets or Sets updated
   */
  @JsonAdapter(UpdatedEnum.Adapter.class)
 public enum UpdatedEnum {
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY");

    private String value;

    UpdatedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdatedEnum fromValue(String value) {
      for (UpdatedEnum b : UpdatedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdatedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdatedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdatedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdatedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private UpdatedEnum updated;

  public ListGetNamesResponseResultsInner() {
  }

  public ListGetNamesResponseResultsInner listName(String listName) {
    
    
    
    
    this.listName = listName;
    return this;
  }

   /**
   * Get listName
   * @return listName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getListName() {
    return listName;
  }


  public void setListName(String listName) {
    
    
    
    this.listName = listName;
  }


  public ListGetNamesResponseResultsInner displayName(String displayName) {
    
    
    
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    
    this.displayName = displayName;
  }


  public ListGetNamesResponseResultsInner listNameEncoded(String listNameEncoded) {
    
    
    
    
    this.listNameEncoded = listNameEncoded;
    return this;
  }

   /**
   * Get listNameEncoded
   * @return listNameEncoded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getListNameEncoded() {
    return listNameEncoded;
  }


  public void setListNameEncoded(String listNameEncoded) {
    
    
    
    this.listNameEncoded = listNameEncoded;
  }


  public ListGetNamesResponseResultsInner oldestPublishedDate(String oldestPublishedDate) {
    
    
    
    
    this.oldestPublishedDate = oldestPublishedDate;
    return this;
  }

   /**
   * Get oldestPublishedDate
   * @return oldestPublishedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOldestPublishedDate() {
    return oldestPublishedDate;
  }


  public void setOldestPublishedDate(String oldestPublishedDate) {
    
    
    
    this.oldestPublishedDate = oldestPublishedDate;
  }


  public ListGetNamesResponseResultsInner newestPublishedDate(String newestPublishedDate) {
    
    
    
    
    this.newestPublishedDate = newestPublishedDate;
    return this;
  }

   /**
   * Get newestPublishedDate
   * @return newestPublishedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNewestPublishedDate() {
    return newestPublishedDate;
  }


  public void setNewestPublishedDate(String newestPublishedDate) {
    
    
    
    this.newestPublishedDate = newestPublishedDate;
  }


  public ListGetNamesResponseResultsInner updated(UpdatedEnum updated) {
    
    
    
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UpdatedEnum getUpdated() {
    return updated;
  }


  public void setUpdated(UpdatedEnum updated) {
    
    
    
    this.updated = updated;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ListGetNamesResponseResultsInner instance itself
   */
  public ListGetNamesResponseResultsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListGetNamesResponseResultsInner listGetNamesResponseResultsInner = (ListGetNamesResponseResultsInner) o;
    return Objects.equals(this.listName, listGetNamesResponseResultsInner.listName) &&
        Objects.equals(this.displayName, listGetNamesResponseResultsInner.displayName) &&
        Objects.equals(this.listNameEncoded, listGetNamesResponseResultsInner.listNameEncoded) &&
        Objects.equals(this.oldestPublishedDate, listGetNamesResponseResultsInner.oldestPublishedDate) &&
        Objects.equals(this.newestPublishedDate, listGetNamesResponseResultsInner.newestPublishedDate) &&
        Objects.equals(this.updated, listGetNamesResponseResultsInner.updated)&&
        Objects.equals(this.additionalProperties, listGetNamesResponseResultsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listName, displayName, listNameEncoded, oldestPublishedDate, newestPublishedDate, updated, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListGetNamesResponseResultsInner {\n");
    sb.append("    listName: ").append(toIndentedString(listName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    listNameEncoded: ").append(toIndentedString(listNameEncoded)).append("\n");
    sb.append("    oldestPublishedDate: ").append(toIndentedString(oldestPublishedDate)).append("\n");
    sb.append("    newestPublishedDate: ").append(toIndentedString(newestPublishedDate)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("list_name");
    openapiFields.add("display_name");
    openapiFields.add("list_name_encoded");
    openapiFields.add("oldest_published_date");
    openapiFields.add("newest_published_date");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListGetNamesResponseResultsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListGetNamesResponseResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListGetNamesResponseResultsInner is not found in the empty JSON string", ListGetNamesResponseResultsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("list_name") != null && !jsonObj.get("list_name").isJsonNull()) && !jsonObj.get("list_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_name").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("list_name_encoded") != null && !jsonObj.get("list_name_encoded").isJsonNull()) && !jsonObj.get("list_name_encoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_name_encoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_name_encoded").toString()));
      }
      if ((jsonObj.get("oldest_published_date") != null && !jsonObj.get("oldest_published_date").isJsonNull()) && !jsonObj.get("oldest_published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldest_published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldest_published_date").toString()));
      }
      if ((jsonObj.get("newest_published_date") != null && !jsonObj.get("newest_published_date").isJsonNull()) && !jsonObj.get("newest_published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newest_published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newest_published_date").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListGetNamesResponseResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListGetNamesResponseResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListGetNamesResponseResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListGetNamesResponseResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListGetNamesResponseResultsInner>() {
           @Override
           public void write(JsonWriter out, ListGetNamesResponseResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ListGetNamesResponseResultsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ListGetNamesResponseResultsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListGetNamesResponseResultsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListGetNamesResponseResultsInner
  * @throws IOException if the JSON string is invalid with respect to ListGetNamesResponseResultsInner
  */
  public static ListGetNamesResponseResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListGetNamesResponseResultsInner.class);
  }

 /**
  * Convert an instance of ListGetNamesResponseResultsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

