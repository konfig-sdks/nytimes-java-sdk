/*
 * Books API
 * The Books API provides information about book reviews and The New York Times Best Sellers lists.  ## Best Sellers Lists Services ### List Names The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.  ``` /lists/names.json ```  ### List Data  The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.  ``` /lists/2019-01-20/hardcover-fiction.json ```  Use \"current\" for {date} to get the latest list. ``` /lists/current/hardcover-fiction.json ```  ## Book Reviews Services  The book reviews service lets you get NYT book review by author, ISBN, or title.  ``` /reviews.json?author=Michelle+Obama ```  ``` /reviews.json?isbn=9781524763138 ```  ``` /reviews.json?title=Becoming ```  ## Example Calls  ``` https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey ``` 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ListGetBestSellersResponse;
import com.konfigthis.client.model.ListGetByDateResponse;
import com.konfigthis.client.model.ListGetHistoryResponse;
import com.konfigthis.client.model.ListGetNamesResponse;
import com.konfigthis.client.model.OverviewResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ListApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ListApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ListApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"api-key\" is required but no API key was provided. Please set \"api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllBestSellersCall(String publishedDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/full-overview.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (publishedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_date", publishedDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllBestSellersValidateBeforeCall(String publishedDate, final ApiCallback _callback) throws ApiException {
        return getAllBestSellersCall(publishedDate, _callback);

    }


    private ApiResponse<OverviewResponse> getAllBestSellersWithHttpInfo(String publishedDate) throws ApiException {
        okhttp3.Call localVarCall = getAllBestSellersValidateBeforeCall(publishedDate, null);
        Type localVarReturnType = new TypeToken<OverviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllBestSellersAsync(String publishedDate, final ApiCallback<OverviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllBestSellersValidateBeforeCall(publishedDate, _callback);
        Type localVarReturnType = new TypeToken<OverviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllBestSellersRequestBuilder {
        private String publishedDate;

        private GetAllBestSellersRequestBuilder() {
        }

        /**
         * Set publishedDate
         * @param publishedDate YYYY-MM-DD  The best-seller list publication date. You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published date, the current week&#39;s best sellers lists will be returned. (optional)
         * @return GetAllBestSellersRequestBuilder
         */
        public GetAllBestSellersRequestBuilder publishedDate(String publishedDate) {
            this.publishedDate = publishedDate;
            return this;
        }
        
        /**
         * Build call for getAllBestSellers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Full overview of Best Sellers lists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllBestSellersCall(publishedDate, _callback);
        }


        /**
         * Execute getAllBestSellers request
         * @return OverviewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Full overview of Best Sellers lists. </td><td>  -  </td></tr>
         </table>
         */
        public OverviewResponse execute() throws ApiException {
            ApiResponse<OverviewResponse> localVarResp = getAllBestSellersWithHttpInfo(publishedDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllBestSellers request with HTTP info returned
         * @return ApiResponse&lt;OverviewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Full overview of Best Sellers lists. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OverviewResponse> executeWithHttpInfo() throws ApiException {
            return getAllBestSellersWithHttpInfo(publishedDate);
        }

        /**
         * Execute getAllBestSellers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Full overview of Best Sellers lists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OverviewResponse> _callback) throws ApiException {
            return getAllBestSellersAsync(publishedDate, _callback);
        }
    }

    /**
     * Best Sellers List Full Overview
     * Get all books for all the Best Sellers lists for specified date.
     * @return GetAllBestSellersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Full overview of Best Sellers lists. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllBestSellersRequestBuilder getAllBestSellers() throws IllegalArgumentException {
        return new GetAllBestSellersRequestBuilder();
    }
    private okhttp3.Call getBestSellersCall(String list, String bestsellersDate, String publishedDate, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (list != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list", list));
        }

        if (bestsellersDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bestsellers-date", bestsellersDate));
        }

        if (publishedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published-date", publishedDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBestSellersValidateBeforeCall(String list, String bestsellersDate, String publishedDate, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'list' is set
        if (list == null) {
            throw new ApiException("Missing the required parameter 'list' when calling getBestSellers(Async)");
        }

        return getBestSellersCall(list, bestsellersDate, publishedDate, offset, _callback);

    }


    private ApiResponse<ListGetBestSellersResponse> getBestSellersWithHttpInfo(String list, String bestsellersDate, String publishedDate, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getBestSellersValidateBeforeCall(list, bestsellersDate, publishedDate, offset, null);
        Type localVarReturnType = new TypeToken<ListGetBestSellersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBestSellersAsync(String list, String bestsellersDate, String publishedDate, Integer offset, final ApiCallback<ListGetBestSellersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBestSellersValidateBeforeCall(list, bestsellersDate, publishedDate, offset, _callback);
        Type localVarReturnType = new TypeToken<ListGetBestSellersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBestSellersRequestBuilder {
        private final String list;
        private String bestsellersDate;
        private String publishedDate;
        private Integer offset;

        private GetBestSellersRequestBuilder(String list) {
            this.list = list;
        }

        /**
         * Set bestsellersDate
         * @param bestsellersDate YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best sellers lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
         * @return GetBestSellersRequestBuilder
         */
        public GetBestSellersRequestBuilder bestsellersDate(String bestsellersDate) {
            this.bestsellersDate = bestsellersDate;
            return this;
        }
        
        /**
         * Set publishedDate
         * @param publishedDate YYYY-MM-DD  The date the best sellers list was published on NYTimes.com (different than bestsellers-date).  Use \&quot;current\&quot; for latest list. (optional)
         * @return GetBestSellersRequestBuilder
         */
        public GetBestSellersRequestBuilder publishedDate(String publishedDate) {
            this.publishedDate = publishedDate;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list. (optional)
         * @return GetBestSellersRequestBuilder
         */
        public GetBestSellersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getBestSellers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list books </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBestSellersCall(list, bestsellersDate, publishedDate, offset, _callback);
        }


        /**
         * Execute getBestSellers request
         * @return ListGetBestSellersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list books </td><td>  -  </td></tr>
         </table>
         */
        public ListGetBestSellersResponse execute() throws ApiException {
            ApiResponse<ListGetBestSellersResponse> localVarResp = getBestSellersWithHttpInfo(list, bestsellersDate, publishedDate, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBestSellers request with HTTP info returned
         * @return ApiResponse&lt;ListGetBestSellersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list books </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListGetBestSellersResponse> executeWithHttpInfo() throws ApiException {
            return getBestSellersWithHttpInfo(list, bestsellersDate, publishedDate, offset);
        }

        /**
         * Execute getBestSellers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list books </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListGetBestSellersResponse> _callback) throws ApiException {
            return getBestSellersAsync(list, bestsellersDate, publishedDate, offset, _callback);
        }
    }

    /**
     * Best Sellers List
     * Get Best Sellers list.  If no date is provided returns the latest list.
     * @param list The name of the Times best sellers list (hardcover-fiction, paperback-nonfiction, ...). The /lists/names service returns all the list names. The encoded list names are lower case with hyphens instead of spaces (e.g. e-book-fiction, instead of E-Book Fiction). (required)
     * @return GetBestSellersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best Sellers list books </td><td>  -  </td></tr>
     </table>
     */
    public GetBestSellersRequestBuilder getBestSellers(String list) throws IllegalArgumentException {
        if (list == null) throw new IllegalArgumentException("\"list\" is required but got null");
            

        return new GetBestSellersRequestBuilder(list);
    }
    private okhttp3.Call getBestSellersOverviewCall(String publishedDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/overview.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (publishedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_date", publishedDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBestSellersOverviewValidateBeforeCall(String publishedDate, final ApiCallback _callback) throws ApiException {
        return getBestSellersOverviewCall(publishedDate, _callback);

    }


    private ApiResponse<OverviewResponse> getBestSellersOverviewWithHttpInfo(String publishedDate) throws ApiException {
        okhttp3.Call localVarCall = getBestSellersOverviewValidateBeforeCall(publishedDate, null);
        Type localVarReturnType = new TypeToken<OverviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBestSellersOverviewAsync(String publishedDate, final ApiCallback<OverviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBestSellersOverviewValidateBeforeCall(publishedDate, _callback);
        Type localVarReturnType = new TypeToken<OverviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBestSellersOverviewRequestBuilder {
        private String publishedDate;

        private GetBestSellersOverviewRequestBuilder() {
        }

        /**
         * Set publishedDate
         * @param publishedDate YYYY-MM-DD  The best-seller list publication date. You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published date, the current week&#39;s best sellers lists will be returned. (optional)
         * @return GetBestSellersOverviewRequestBuilder
         */
        public GetBestSellersOverviewRequestBuilder publishedDate(String publishedDate) {
            this.publishedDate = publishedDate;
            return this;
        }
        
        /**
         * Build call for getBestSellersOverview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Overview of Best Sellers lists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBestSellersOverviewCall(publishedDate, _callback);
        }


        /**
         * Execute getBestSellersOverview request
         * @return OverviewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Overview of Best Sellers lists. </td><td>  -  </td></tr>
         </table>
         */
        public OverviewResponse execute() throws ApiException {
            ApiResponse<OverviewResponse> localVarResp = getBestSellersOverviewWithHttpInfo(publishedDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBestSellersOverview request with HTTP info returned
         * @return ApiResponse&lt;OverviewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Overview of Best Sellers lists. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OverviewResponse> executeWithHttpInfo() throws ApiException {
            return getBestSellersOverviewWithHttpInfo(publishedDate);
        }

        /**
         * Execute getBestSellersOverview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Overview of Best Sellers lists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OverviewResponse> _callback) throws ApiException {
            return getBestSellersOverviewAsync(publishedDate, _callback);
        }
    }

    /**
     * Best Sellers List Overview
     * Get top 5 books for all the Best Sellers lists for specified date.
     * @return GetBestSellersOverviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overview of Best Sellers lists. </td><td>  -  </td></tr>
     </table>
     */
    public GetBestSellersOverviewRequestBuilder getBestSellersOverview() throws IllegalArgumentException {
        return new GetBestSellersOverviewRequestBuilder();
    }
    private okhttp3.Call getByDateCall(String date, String list, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{date}/{list}.json"
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()))
            .replace("{" + "list" + "}", localVarApiClient.escapeString(list.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByDateValidateBeforeCall(String date, String list, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getByDate(Async)");
        }

        // verify the required parameter 'list' is set
        if (list == null) {
            throw new ApiException("Missing the required parameter 'list' when calling getByDate(Async)");
        }

        return getByDateCall(date, list, offset, _callback);

    }


    private ApiResponse<ListGetByDateResponse> getByDateWithHttpInfo(String date, String list, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getByDateValidateBeforeCall(date, list, offset, null);
        Type localVarReturnType = new TypeToken<ListGetByDateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByDateAsync(String date, String list, Integer offset, final ApiCallback<ListGetByDateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByDateValidateBeforeCall(date, list, offset, _callback);
        Type localVarReturnType = new TypeToken<ListGetByDateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByDateRequestBuilder {
        private final String date;
        private final String list;
        private Integer offset;

        private GetByDateRequestBuilder(String date, String list) {
            this.date = date;
            this.list = list;
        }

        /**
         * Set offset
         * @param offset Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list. (optional)
         * @return GetByDateRequestBuilder
         */
        public GetByDateRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getByDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list books. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByDateCall(date, list, offset, _callback);
        }


        /**
         * Execute getByDate request
         * @return ListGetByDateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list books. </td><td>  -  </td></tr>
         </table>
         */
        public ListGetByDateResponse execute() throws ApiException {
            ApiResponse<ListGetByDateResponse> localVarResp = getByDateWithHttpInfo(date, list, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByDate request with HTTP info returned
         * @return ApiResponse&lt;ListGetByDateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list books. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListGetByDateResponse> executeWithHttpInfo() throws ApiException {
            return getByDateWithHttpInfo(date, list, offset);
        }

        /**
         * Execute getByDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list books. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListGetByDateResponse> _callback) throws ApiException {
            return getByDateAsync(date, list, offset, _callback);
        }
    }

    /**
     * Best Sellers List by Date
     * Get Best Sellers list by date.
     * @param date YYYY-MM-DD or \&quot;current\&quot;  The date the best sellers list was published on NYTimes.com.  Use \&quot;current\&quot; to get latest list. (required)
     * @param list Name of the Best Sellers List (e.g. hardcover-fiction). You can get the full list of names from the /lists/names.json service. (required)
     * @return GetByDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best Sellers list books. </td><td>  -  </td></tr>
     </table>
     */
    public GetByDateRequestBuilder getByDate(String date, String list) throws IllegalArgumentException {
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
            

        if (list == null) throw new IllegalArgumentException("\"list\" is required but got null");
            

        return new GetByDateRequestBuilder(date, list);
    }
    private okhttp3.Call getHistoryCall(String ageGroup, String author, String contributor, String isbn, Integer offset, String price, String publisher, String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/best-sellers/history.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ageGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("age-group", ageGroup));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (contributor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributor", contributor));
        }

        if (isbn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isbn", isbn));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        if (publisher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publisher", publisher));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryValidateBeforeCall(String ageGroup, String author, String contributor, String isbn, Integer offset, String price, String publisher, String title, final ApiCallback _callback) throws ApiException {
        return getHistoryCall(ageGroup, author, contributor, isbn, offset, price, publisher, title, _callback);

    }


    private ApiResponse<ListGetHistoryResponse> getHistoryWithHttpInfo(String ageGroup, String author, String contributor, String isbn, Integer offset, String price, String publisher, String title) throws ApiException {
        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(ageGroup, author, contributor, isbn, offset, price, publisher, title, null);
        Type localVarReturnType = new TypeToken<ListGetHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHistoryAsync(String ageGroup, String author, String contributor, String isbn, Integer offset, String price, String publisher, String title, final ApiCallback<ListGetHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(ageGroup, author, contributor, isbn, offset, price, publisher, title, _callback);
        Type localVarReturnType = new TypeToken<ListGetHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHistoryRequestBuilder {
        private String ageGroup;
        private String author;
        private String contributor;
        private String isbn;
        private Integer offset;
        private String price;
        private String publisher;
        private String title;

        private GetHistoryRequestBuilder() {
        }

        /**
         * Set ageGroup
         * @param ageGroup The target age group for the best seller. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder ageGroup(String ageGroup) {
            this.ageGroup = ageGroup;
            return this;
        }
        
        /**
         * Set author
         * @param author The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author&#39;s first name. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder author(String author) {
            this.author = author;
            return this;
        }
        
        /**
         * Set contributor
         * @param contributor The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder contributor(String contributor) {
            this.contributor = contributor;
            return this;
        }
        
        /**
         * Set isbn
         * @param isbn International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229). (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder isbn(String isbn) {
            this.isbn = isbn;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Sets the starting point of the result set (0, 20, ...).  Used to paginate thru results if there are more than 20. Defaults to 0. The num_results field indicates how many results there are total. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set price
         * @param price The publisher&#39;s list price of the best seller, including decimal point. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder price(String price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set publisher
         * @param publisher The standardized name of the publisher (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder publisher(String publisher) {
            this.publisher = publisher;
            return this;
        }
        
        /**
         * Set title
         * @param title The title of the best seller  When searching, you can specify a portion of a title or a full title. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Build call for getHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list history </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoryCall(ageGroup, author, contributor, isbn, offset, price, publisher, title, _callback);
        }


        /**
         * Execute getHistory request
         * @return ListGetHistoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list history </td><td>  -  </td></tr>
         </table>
         */
        public ListGetHistoryResponse execute() throws ApiException {
            ApiResponse<ListGetHistoryResponse> localVarResp = getHistoryWithHttpInfo(ageGroup, author, contributor, isbn, offset, price, publisher, title);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHistory request with HTTP info returned
         * @return ApiResponse&lt;ListGetHistoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list history </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListGetHistoryResponse> executeWithHttpInfo() throws ApiException {
            return getHistoryWithHttpInfo(ageGroup, author, contributor, isbn, offset, price, publisher, title);
        }

        /**
         * Execute getHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Best Sellers list history </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListGetHistoryResponse> _callback) throws ApiException {
            return getHistoryAsync(ageGroup, author, contributor, isbn, offset, price, publisher, title, _callback);
        }
    }

    /**
     * Best Sellers List History
     * Get Best Sellers list history.
     * @return GetHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best Sellers list history </td><td>  -  </td></tr>
     </table>
     */
    public GetHistoryRequestBuilder getHistory() throws IllegalArgumentException {
        return new GetHistoryRequestBuilder();
    }
    private okhttp3.Call getNamesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/names.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getNamesCall(_callback);

    }


    private ApiResponse<ListGetNamesResponse> getNamesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getNamesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListGetNamesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNamesAsync(final ApiCallback<ListGetNamesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListGetNamesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNamesRequestBuilder {

        private GetNamesRequestBuilder() {
        }

        /**
         * Build call for getNames
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Best Sellers list names. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNamesCall(_callback);
        }


        /**
         * Execute getNames request
         * @return ListGetNamesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Best Sellers list names. </td><td>  -  </td></tr>
         </table>
         */
        public ListGetNamesResponse execute() throws ApiException {
            ApiResponse<ListGetNamesResponse> localVarResp = getNamesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNames request with HTTP info returned
         * @return ApiResponse&lt;ListGetNamesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Best Sellers list names. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListGetNamesResponse> executeWithHttpInfo() throws ApiException {
            return getNamesWithHttpInfo();
        }

        /**
         * Execute getNames request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Best Sellers list names. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListGetNamesResponse> _callback) throws ApiException {
            return getNamesAsync(_callback);
        }
    }

    /**
     * Best Sellers List Names
     * Get Best Sellers list names.
     * @return GetNamesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Best Sellers list names. </td><td>  -  </td></tr>
     </table>
     */
    public GetNamesRequestBuilder getNames() throws IllegalArgumentException {
        return new GetNamesRequestBuilder();
    }
}
